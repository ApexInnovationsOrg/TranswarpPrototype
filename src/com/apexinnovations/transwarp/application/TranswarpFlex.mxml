<?xml version="1.0" encoding="utf-8"?>
<application:TranswarpPrototype xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:application="com.apexinnovations.transwarp.application.*"
						 xmlns:ui="com.apexinnovations.transwarp.ui.*"
						 preloader="com.apexinnovations.transwarp.application.preloader.PreloaderDisplay"
						 frameRate="30"
						 mask="{appMask}">

	<fx:Declarations>
		<s:TitleWindow title="Title" id="infoDialog" close="PopUpManager.removePopUp(infoDialog)" width="400" height="300">
			<s:TextArea id="infoText" height="100%" width="100%"/> 
		</s:TitleWindow>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import br.com.stimuli.loading.BulkLoader;
			import br.com.stimuli.loading.loadingtypes.LoadingItem;
			
			import com.apexinnovations.transwarp.application.events.PageSelectionEvent;
			import com.apexinnovations.transwarp.config.IConfigurationAcceptor;
			import com.apexinnovations.transwarp.webservices.*;
			
			import mx.managers.PopUpManager;
			
			
			protected var manager:CustomSystemManager;
			protected var loader:BulkLoader;
			protected var visitTimer:Timer = new Timer(1000);
			protected var idleTimer:Timer = new Timer(1000);
			protected var visit:VisitService = new VisitService();
			protected var visitSession:uint = 0;
			protected var timeout:uint = 0;	
			protected var currentlyIdle:Boolean = false;
			protected var flatContent:Array; 									// Holds a flat list of all pageIDs for the currently loaded product
			protected var currentRequest:String;
			
			protected override function createChildren():void {
				super.createChildren();
				manager = CustomSystemManager(systemManager);
				
				if (!manager.xml || manager.xml.localName() == 'error') {
					// XML load error
					popupInfoDialog('There was an error loading data from the server.\n\nPlease contact Apex Technical Support at 1-866-294-4599 x111.');
				} else {
					setupContentLoading();
					
					leftBar.productData = manager.xml.product.courses[0];
					// Load the start page after a short delay to prevent a Security Domain error
					leftBar.setSelection(manager.xml.user.@startPage);
										
					timeout = uint(manager.xml.user.@coursewareTimeout);
					// Add event listeners to prevent courseware "timeout"
					manager.addEventListener(KeyboardEvent.KEY_DOWN, resetTimeout);
					manager.addEventListener(MouseEvent.CLICK, resetTimeout);
					manager.addEventListener(MouseEvent.MOUSE_MOVE, resetTimeout);
					
					// Set the idle timer
					idleTimer.delay = 1000 * timeout;
					idleTimer.addEventListener(TimerEvent.TIMER, idleTimeout);
					idleTimer.start();
				}
				
				
			}
			
			protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				//trace(container.height / container.width);
			}
			
			protected function resetTimeout(event:Event):void {
				if (currentlyIdle) {
					currentlyIdle = infoDialog.isPopUp;	// turns false when popup closed
				}
				if (!currentlyIdle) {
					// Set the idle timer
					idleTimer.reset();
					idleTimer.delay = 1000 * timeout;
					idleTimer.start();
					
					if (!visitTimer.running) {
						// Need to start a new visit
						visitTimerHandler();
					}
				}
			}
			
			protected function idleTimeout(event:Event):void {
				if (!currentlyIdle) {
					// close current session
					visit.dispatch(visitSession);
					visitSession = 0;
					
					// stop all timers and popup dialog
					idleTimer.stop();
					visitTimer.stop();
					popupInfoDialog('You have been idle for ' + timeout/60 + ' minutes.\n\nPlease close this dialog box to resume the course.', 'You Appear to be Idle');

					currentlyIdle = true;
				}
			}
			
			protected function popupInfoDialog(info:String, title:String = 'Error'):void {
				if (!currentlyIdle) {
					if (infoDialog.isPopUp) PopUpManager.removePopUp(infoDialog);	// Take down any currently displayed dialogs
					
					PopUpManager.addPopUp(infoDialog, this, true);
					PopUpManager.centerPopUp(infoDialog);
					infoText.text = info;
					infoDialog.title = title;
				}
			}
			
			protected function pageSelectionChanged(event:PageSelectionEvent):void {
				
				// stop any old timers
				visitTimer.stop();
				
				// update the current visit
				if (visitSession > 0) {
					visit.dispatch(visitSession);					
				}
				
				if(container.content != null) {
					var item:LoadingItem = loader.get(String(ApexWebService.pageID));
					if(item && item._content is AVM1Movie)
						loader.remove(item);
					loader.start();
				}
								
				// set the new pageID
				var pageID:uint = uint(event.id);
				//var page:XML = 
				ApexWebService.pageID = pageID;
				
				//check the loading status of the requested page
				var loadingItem:LoadingItem = loader.get(pageID);
				if(!loadingItem) {
					loadingItem = loader.add(getURL(pageID), {id:pageID});
					loader.start();
				}
				
				if(loadingItem.status == LoadingItem.STATUS_FINISHED) {
					loadComplete();
				
				} else if(loadingItem.status == LoadingItem.STATUS_ERROR) {
					loadError();
				} else { //Loading, but not yet complete
					var priority:int = loader.highestPriority + 4;
					loader.changeItemPriority(String(pageID), priority--);
					var index:int = flatContent.indexOf(pageID);
					changePriorityInRange(index, index+2, priority)
					changePriorityInRange(index-1, index-1, priority-3);
					
					loadingItem.addEventListener(Event.INIT, loadComplete, false, 0, true);
					loadingItem.addEventListener(Event.COMPLETE, loadComplete, false, 0, true);
					loadingItem.addEventListener(ProgressEvent.PROGRESS, loadProgress, false, 0, true);
				}
				
				SoundMixer.stopAll();
				
				// Allow 5 seconds to begin saving a new visit
				visitTimer.delay = 5000;
				visitTimer.addEventListener(TimerEvent.TIMER, visitTimerHandler);
				visitTimer.start();

				progressPanel.title = 'Loading ' + manager.xml.product..page.(@id == pageID).@name + '...';
				progressBar.setProgress(0,100);
			}
			
			protected function visitTimerHandler(event:TimerEvent = null):void {
				// stop the timer
				visitTimer.stop();
				
				if (visitTimer.delay == 5000 || visitSession == 0) {
					// create new visitSession
					visitSession = 0;
					visit.addEventListener(ApexWebServiceEvent.PAGE_COMPLETE, visitSaved);
					visit.addEventListener(ApexWebServiceEvent.PAGE_FAILURE, visitFailed);
					visit.dispatch();					
				} else {
					// update current session
					visit.dispatch(visitSession);					
				}
				
				// restart timer with delay of 1 minute
				visitTimer.delay = 60000;
				visitTimer.start();
			}

			protected function visitSaved(event:ApexWebServiceEvent):void {
				if (event.data.insertID) {
					visitSession = event.data.insertID;
				}
			}
			
			protected function visitFailed(event:ApexWebServiceEvent):void {
				// TODO: How are we handling this?
			}
			
			protected function loadComplete(event:Event = null):void {
				var id:String, item:LoadingItem;
				if(event) {
					item = LoadingItem(event.target);
					id = item.id;
					item.removeEventListener(Event.COMPLETE, loadComplete);
					item.removeEventListener(Event.INIT, loadComplete);
					item.removeEventListener(ProgressEvent.PROGRESS, loadProgress);
				} else {
					id = String(ApexWebService.pageID);
					item = loader.get(id);
				}
				
				var itemLoader:Loader = loader.getDisplayObjectLoader(id);
				var content:* = itemLoader.content;
				
				if(content is AVM1Movie && id != String(ApexWebService.pageID)) {
					//trace("removing "  + id);
					loader.remove(id);
					loader.start();
					return;
				}
				
				container.content = itemLoader;
				
				if(content is IConfigurationAcceptor) {
					//TODO: Load config xml and apply it here like this: IConfigurationAcceptor(content).config = xml; 
				}
				
				progressPanel.visible = false;

				var page:XML = manager.xml.product..page.(@id == ApexWebService.pageID)[0];
				
				rightBar.updatesButton.enabled = (page.@updated == true);	// Have no idea why just "= page.@updated;" isn't working
				rightBar.toolsButton.enabled = page.tools.hasComplexContent();
				rightBar.bookmarksButton.enabled = true;
				rightBar.commentsButton.enabled = true;
				rightBar.linksButton.enabled = page.links.hasComplexContent();
				rightBar.transcriptButton.enabled = page.transcript.hasComplexContent();
				rightBar.questionsButton.enabled = page.questions.hasComplexContent();
				rightBar.instructionsButton.enabled = page.instructions.hasComplexContent();
			}
			
			protected function loadProgress(event:ProgressEvent):void {
				progressPanel.visible = true;
				progressBar.setProgress(event.bytesLoaded, event.bytesTotal);
			}
			
			protected function loadError(event:Event = null):void {
				var page:XML = manager.xml.product..page.(@id == ApexWebService.pageID)[0];

				rightBar.updatesButton.enabled = false;
				rightBar.toolsButton.enabled = false;
				rightBar.bookmarksButton.enabled = false;
				rightBar.commentsButton.enabled = false;
				rightBar.linksButton.enabled = false;
				rightBar.transcriptButton.enabled = false;
				rightBar.questionsButton.enabled = false;
				rightBar.instructionsButton.enabled = false;
				
				var log:LogService = new LogService();
				log.dispatch("Unable to load page content: " + getURL(ApexWebService.pageID));
				progressPanel.visible = false;
				popupInfoDialog('There was an error loading the page from the server.\n\nPlease contact Apex Technical Support at 1-866-294-4599 x111. \n(Page ID: ' + ApexWebService.pageID + ')', 'Page Not Found - ' + page.@name);
			}

			private function getURL(pageID:int, addGarbage:Boolean=false):String {
				return manager.xml.@rootFolder + '/PAGE_' + zeroPad(pageID, 6) + '.swf' + (addGarbage ? '?' + ApexWebService.randString(10) : '?0000000000');
			}
			
			private function zeroPad(number:int, width:int):String {
				var s:String = String(number);
				while(s.length < width) s = '0' + s;
				return s;
			}

			protected function setupContentLoading():void {
				flatContent = [];
				loader = new BulkLoader();
				loader.logLevel = BulkLoader.LOG_SILENT;
				loader.maxConnectionsPerHost = 4;
				for each(var page:XML in manager.xml..page) {
					var id:uint = uint(page.@id);
					flatContent[flatContent.length] = uint;
					var item:LoadingItem = loader.add(getURL(id, page.@updated == true), {id:id});
					item.addEventListener(Event.INIT, loadComplete);
				}
				loader.start();
			}

			private function changePriorityInRange(startIndex:int, endIndex:int, startPriority:int):void {
				for(var i:int = startIndex; i <= endIndex; ++i) {
					try {
						loader.changeItemPriority(String(flatContent[i]), startPriority--);
					} catch(e:RangeError) { }
				}
			}

		]]>
	</fx:Script>	
	
	
	<application:layout>
		<ui:TranswarpLayout heightOffset="{topBar.height}" widthOffset="{rightBar.width + 20}" />
	</application:layout>
	
	<s:VGroup width="100%" height="100%" gap="0">
		<ui:TopBar depth="1" id="topBar" />
		<s:Group depth="0" width="100%" height="100%">
			<ui:ContentContainer id="container" left="20" right="40" bottom="0" top="0" mask="{contentMask}"/>
			<ui:LeftBar id="leftBar" x="0" top="5" bottom="5" pageSelectionChanged="pageSelectionChanged(event)"/>
			<ui:RightBar id="rightBar" right="0" />
			<s:Panel id="progressPanel" title="Loading..." width="30%" height="78" horizontalCenter="0" verticalCenter="0" visible="false" backgroundColor="0xFFFFFF">
				<s:VGroup left="10" right="10" top="10" bottom="10">
					<mx:ProgressBar id="progressBar" labelPlacement="bottom" minimum="0" maximum="100" label="0%" direction="right" mode="manual" width="100%"/>
				</s:VGroup>
			</s:Panel>
			
			<s:Group id="contentMask"  top="0" bottom="0" left="19" right="39">
				<s:Rect height="100%" width="100%">
					<s:fill>
						<s:SolidColor color="0x00ffff" alpha="0"/>
					</s:fill>
				</s:Rect>
			</s:Group>			
		</s:Group>
	</s:VGroup>
	
	<s:Group id="appMask" x="0" y="0" width="100%" height="100%">
		<s:Rect height="100%" width="100%">
			<s:fill>
				<s:SolidColor color="0x00ffff" alpha="0.25"/>
			</s:fill>
		</s:Rect>
	</s:Group>

</application:TranswarpPrototype>
