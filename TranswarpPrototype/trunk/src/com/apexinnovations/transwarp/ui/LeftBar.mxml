<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" height="100%" xmlns:sparkTree="com.sparkTree.*" xmlns:tree="com.apexinnovations.transwarp.ui.tree.*">
	
	<fx:Metadata>
		[Event(name="pageSelectionChanged", type="com.apexinnovations.transwarp.application.events.PageSelectionEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.apexinnovations.transwarp.application.events.PageSelectionEvent;
			import com.apexinnovations.transwarp.ui.tree.XMLLinearIList;
			import com.greensock.TweenLite;
			import com.greensock.easing.*;
			
			import spark.events.IndexChangeEvent;
			
			protected var xmlRoot:XML = new XML();
			
			protected var _productData:XML;
			protected var _isOpen:Boolean = true;
			protected var _tween:TweenLite;			
			
			public function get productData():XML {
				return _productData;
			}
			
			public function set productData(value:XML):void {
				value = value.copy();	// Ensure that no changes to the structure propagate up.
				
				preProcess(value);				
				tree.dataProvider = new XMLLinearIList(value, []);
				_productData = value;
			}	
			
			public function setSelection(pageID:uint, suppreessChangeEvent:Boolean=false):void {
				var startPage:XML = _productData..page.(@id==pageID)[0];
				var node:XML = startPage.parent();
				if(!node)
					return;
				var list:XMLLinearIList = tree.dataProvider as XMLLinearIList;
				
				while(node && node != _productData) {
					list.openNode(node);
					node = node.parent();
				}
								
				tree.selectedItem = startPage;
				if(!suppreessChangeEvent)
					dispatchEvent(new PageSelectionEvent(pageID));
			}
			
			protected function preProcess(xml:XML):void {
				if(xml.localName() == "page")
					delete xml.*;			// Trim children of page nodes since they need to be the leaves for this tree.
				
				if(xml.children().length() > 0)
					for each(var child:XML in xml.children())
					preProcess(child);
			}
			
			protected function selectionChange(event:IndexChangeEvent):void {
				if(event.oldIndex != -1 ) { //when the oldIndex is -1 this indicates that we're just resetting the selectedIndex and we should ignore this event.
					collapse();
					var data:XML = XML(tree.selectedItem);
					dispatchEvent(new PageSelectionEvent(data.@id));
				}
			}
						
			
			public function collapse():void {
				if(!_isOpen)
					return;
				if(_tween)
					_tween.kill();
							
				_tween = TweenLite.to(this, 0.5, {x: -width+20, ease: Sine.easeIn}); 
				_isOpen = false;
			}
			
			public function open():void {
				if(_isOpen)
					return;
				if(_tween)
					_tween.kill();
				
				_tween = TweenLite.to(this, 0.5, {x: 0, ease: Sine.easeOut});
				_isOpen = true;
			}
			
			public function toggleCollapse():void {
				if(_isOpen)
					collapse();
				else
					open();
			}
			
		]]>
	</fx:Script>
	
	<s:Rect top="0" topRightRadiusX="10" bottomRightRadiusX="10" width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0x9999aa"/>
		</s:fill>
	</s:Rect>
	
	<s:Group width="20" height="100%" right="0" buttonMode="true" click="toggleCollapse()">
		<s:Rect width="100%" height="100%" topRightRadiusX="10" bottomRightRadiusX="10">
			<s:fill>
				<s:SolidColor color="0xff00ff" alpha="0"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	
	<tree:Tree id="tree" top="10" bottom="10" right="20" left="5" minWidth="300" change="selectionChange(event)"/>
		
	<s:filters>
		<s:DropShadowFilter alpha=".5" />
	</s:filters>
	
</s:Group>
